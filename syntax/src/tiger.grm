%{
#include <stdio.h>
#include "util.h"
#include "errormsg.h"

int yylex(void); /* function prototype */

void yyerror(char *s)
{
 EM_error(EM_tokPos, "%s", s);
}
%}


%union {
	int pos;
	int ival;
	string sval;
	}

%token <sval> ID STRING
%token <ival> INT

%token 
  COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK 
  LBRACE RBRACE DOT 
  PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE
  AND OR ASSIGN
  ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF 
  BREAK NIL
  FUNCTION VAR TYPE 

%start program

%%

/* This is a skeleton grammar file, meant to illustrate what kind of
 * declarations are necessary above the %% mark.  Students are expected
 *  to replace the two dummy productions below with an actual grammar. 
 */

program: exp

dec: tydec
    | vardec
    | fundec

tydec: TYPE ID ASSIGN ty

ty: ID
    | LBRACE tyfields RBRACE
    | ARRAY OF ID
  
tyfields: /* empty */
    | ID COLON ID
    | tyfields COMMA tyfields

vardec: VAR ID ASSIGN exp
    | VAR ID COLON ID ASSIGN exp

fundec: FUNCTION ID LPAREN tyfields RPAREN EQ exp
    | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp

lvalue: ID
    | lvalue DOT ID
    | lvalue LBRACK exp RBRACK

exp: dec
    | lvalue
    | LPAREN RPAREN
    | INT
    | NIL
    | MINUS INT
    | funcall
    | opexp
    | comexp
    | boolexp
    | exp COMMA exp

funcall: ID LPAREN RPAREN
    | ID LPAREN explist RPAREN

explist: exp
    | explist COMMA exp

opexp: exp op exp

op: PLUS
    | MINUS
    | TIMES
    | DIVIDE

comexp: exp com exp

com: EQ
    | NEQ
    | LT
    | LE
    | GT
    | GE

boolexp: exp boolop exp

boolop: AND
    | OR