%{
#include <stdio.h>
#include "util.h"
#include "errormsg.h"

int yylex(void); /* function prototype */

void yyerror(char *s)
{
 EM_error(EM_tokPos, "%s", s);
}
%}


%union {
	int pos;
	int ival;
	string sval;
	}

%token <sval> ID STRING
%token <ival> INT

%token 
  COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK 
  LBRACE RBRACE DOT 
  PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE
  AND OR ASSIGN
  ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF 
  BREAK NIL
  FUNCTION VAR TYPE 

%start program

%%

program: /* empty */
        |'\n'
        | exp
        | exp '\n'
        | program '\n' program

exp: decs
    | lvalue
    | lvalue ASSIGN exp
    | LPAREN exp RPAREN
    | INT
    | NIL
    | MINUS INT
    | funcall
    | opexp
    | comexp
    | boolexp
    | create
    | ifclause
    | whileclause
    | forclause
    | BREAK
    | let
    | exp COMMA exp

decs: /* empty */
    | dec
    | decs COMMA decs

dec: tydec
    | vardec
    | fundec

tydec: TYPE ID ASSIGN ty

ty: ID
    | LBRACE tyfields RBRACE
    | ARRAY OF ID
  
tyfields: /* empty */
    | ID COLON ID
    | tyfields COMMA tyfields

vardec: VAR ID ASSIGN exp
    | VAR ID COLON ID ASSIGN exp

fundec: FUNCTION ID LPAREN tyfields RPAREN EQ exp
    | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp

lvalue: ID
    | lvalue DOT ID
    | lvalue LBRACK exp RBRACK

funcall: ID LPAREN RPAREN
    | ID LPAREN explist RPAREN

explist: exp
    | explist COMMA exp

opexp: exp op exp

op: PLUS
    | MINUS
    | TIMES
    | DIVIDE

comexp: exp com exp

com: EQ
    | NEQ
    | LT
    | LE
    | GT
    | GE

boolexp: exp boolop exp

boolop: AND
    | OR

create: record
    | array

record: ID LBRACE rfields RBRACE

rfields: ID EQ exp
    | rfields COMMA rfields

array: ID LBRACK exp RBRACK OF exp

ifclause: ifelse
    | ifthen

ifelse: IF exp THEN exp ELSE exp

ifthen: IF exp THEN exp

whileclause: WHILE exp DO exp

forclause: FOR ID ASSIGN exp TO exp DO exp

let: LET decs IN expseq END

expseq: /* empty */
    | exp
    | expseq SEMICOLON expseq